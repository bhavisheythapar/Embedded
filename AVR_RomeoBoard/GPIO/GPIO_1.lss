
GPIO_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  00000170  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000185  00000000  00000000  0000018b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000100  00000000  00000000  00000310  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000016d  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  00000580  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000c8  00000000  00000000  000005a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000058  00000000  00000000  00000668  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  000006c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
#include <util/delay.h>

void delay_ms (uint16_t ms);

int main (void)
{
  80:	42 e0       	ldi	r20, 0x02	; 2
  82:	50 e0       	ldi	r21, 0x00	; 0
	// Configure PD2 to PD7 in write mode on DDR
	for (int i = 2; i < 8; i++)
	{
		DDRD |= 1<<i;
  84:	61 e0       	ldi	r22, 0x01	; 1
  86:	70 e0       	ldi	r23, 0x00	; 0
  88:	2a b1       	in	r18, 0x0a	; 10
  8a:	cb 01       	movw	r24, r22
  8c:	04 2e       	mov	r0, r20
  8e:	02 c0       	rjmp	.+4      	; 0x94 <main+0x14>
  90:	88 0f       	add	r24, r24
  92:	99 1f       	adc	r25, r25
  94:	0a 94       	dec	r0
  96:	e2 f7       	brpl	.-8      	; 0x90 <main+0x10>
  98:	28 2b       	or	r18, r24
  9a:	2a b9       	out	0x0a, r18	; 10
void delay_ms (uint16_t ms);

int main (void)
{
	// Configure PD2 to PD7 in write mode on DDR
	for (int i = 2; i < 8; i++)
  9c:	4f 5f       	subi	r20, 0xFF	; 255
  9e:	5f 4f       	sbci	r21, 0xFF	; 255
  a0:	48 30       	cpi	r20, 0x08	; 8
  a2:	51 05       	cpc	r21, r1
  a4:	89 f7       	brne	.-30     	; 0x88 <main+0x8>
	}

	// Configure PB0 and PB1 to write mode on DDR
	for (int j = 0; j <2; j++)
	{
		DDRB |= 1<<j;
  a6:	20 9a       	sbi	0x04, 0	; 4
  a8:	21 9a       	sbi	0x04, 1	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  aa:	a0 e4       	ldi	r26, 0x40	; 64
  ac:	bc e9       	ldi	r27, 0x9C	; 156
	}

	while (1)
	{
		PORTD = 0;
  ae:	60 e9       	ldi	r22, 0x90	; 144
  b0:	71 e0       	ldi	r23, 0x01	; 1
  b2:	1b b8       	out	0x0b, r1	; 11
		PORTB = 0;
  b4:	15 b8       	out	0x05, r1	; 5
  b6:	21 e0       	ldi	r18, 0x01	; 1
  b8:	30 e0       	ldi	r19, 0x00	; 0
  ba:	44 e0       	ldi	r20, 0x04	; 4
		for (int counter = 1; counter <= 256; counter++)
		{
		    if (counter>100)
  bc:	25 36       	cpi	r18, 0x65	; 101
  be:	31 05       	cpc	r19, r1
  c0:	44 f0       	brlt	.+16     	; 0xd2 <main+0x52>
  c2:	80 e1       	ldi	r24, 0x10	; 16
  c4:	97 e2       	ldi	r25, 0x27	; 39
  c6:	fb 01       	movw	r30, r22
  c8:	31 97       	sbiw	r30, 0x01	; 1
  ca:	f1 f7       	brne	.-4      	; 0xc8 <main+0x48>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  cc:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  ce:	d9 f7       	brne	.-10     	; 0xc6 <main+0x46>
  d0:	03 c0       	rjmp	.+6      	; 0xd8 <main+0x58>
  d2:	cd 01       	movw	r24, r26
  d4:	01 97       	sbiw	r24, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x54>
                _delay_ms(1000);
		    else
		        _delay_ms(10);
			PORTB = counter/64;
  d8:	c9 01       	movw	r24, r18
  da:	56 e0       	ldi	r21, 0x06	; 6
  dc:	95 95       	asr	r25
  de:	87 95       	ror	r24
  e0:	5a 95       	dec	r21
  e2:	e1 f7       	brne	.-8      	; 0xdc <main+0x5c>
  e4:	85 b9       	out	0x05, r24	; 5
			PORTD = counter*4;
  e6:	4b b9       	out	0x0b, r20	; 11

	while (1)
	{
		PORTD = 0;
		PORTB = 0;
		for (int counter = 1; counter <= 256; counter++)
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	4c 5f       	subi	r20, 0xFC	; 252
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	21 30       	cpi	r18, 0x01	; 1
  f2:	38 07       	cpc	r19, r24
  f4:	19 f7       	brne	.-58     	; 0xbc <main+0x3c>
  f6:	dd cf       	rjmp	.-70     	; 0xb2 <main+0x32>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
